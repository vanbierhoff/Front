"use strict";/** * @param image {HTMLAllCollection} - коллекция изображений слайдера * @param {HTMLImageElement}  imgSlider.arrowLeft , imgSlider.arrowRight * @param {HTMLImageElement} - иконка загрузки, loadIcon * */let imgSlider= {  divSlider : document.querySelector('.slider'),     image : document.querySelectorAll('.slider-img'),    arrowLeft : document.createElement('img'),    arrowRight : document.createElement('img'),    loadIcon : document.createElement('img'),};let SliderRome = {    divSlider : document.querySelector('.slider-Rome'),    image : document.querySelectorAll('.slider-rome-img'),    arrowLeft : document.createElement('img'),    arrowRight : document.createElement('img'),    loadIcon : document.createElement('img'),};/** * Конструктор слайдеров. * @param imgObj -принимает весь объект целиком * @param img  - Изображения внутри объекта слайдера * @param divSlider {HTMLDivElement} - див оболочка слайлера * @param arrowRight {HTMLImageElement}  Стрелки слайдера * @param arrowLeft {HTMLImageElement}   Стрелки слайдера * @param loadIcon {HTMLImageElement}     Иконка загрузки слайдера * @constructor Конструктор принимает необходимые объекты, добавляет внутрь слайдера стрелки "влево" и "вправо"  для корректного создания слайдера  класс divSlider и классы картинок img не должны совпадать( Кроме класса "sider-none" т.е изображения слайдера 1 имеют, например класс 'slider1' изображения  2 слайдера 'slider2' */function Slider (imgObj,img,divSlider,arrowRight,arrowLeft,loadIcon) {    this.sliders = divSlider;    this.ldIcon = loadIcon;    this.ldIcon.src = 'img/loaded.png';    this.ldIcon.classList.add('slider-load-icon');    this.sliders.insertAdjacentElement('afterbegin', loadIcon);    this.imageID = 1;    this.image = img;    this.arrRight = arrowRight;    this.arrLeft = arrowLeft;    this.arrRight.classList.add('slider-arrow','slider-arrow-position','slider-arrow-right');    this.arrLeft.classList.add('slider-arrow','slider-arrow-position','slider-arrow-left');    this.arrRight.src = 'img/arrow-right.png';    this.arrLeft.src = 'img/arrow-left.png';    this.sliders.insertAdjacentElement('afterbegin',arrowRight);    this.sliders.insertAdjacentElement('afterbegin',arrowLeft);}/** * @method setLeftImage  перелистывает изображние влево * @param imageID  - номер выводимого элемента *  forEach - цикл перебирает все изображения и удаляет класс 'slider-visible' */Slider.prototype.setLeftImage = function () {     if (this.imageID === 0 ) {         this.image.forEach(function (elem) {             if (elem.classList.contains('slider-visible')) {                 elem.classList.remove('slider-visible')             }         });         this.image[this.imageID].classList.add('slider-visible');         this.imageID = this.image.length - 1;         return;     } else if (this.imageID != 0 ){        this.image.forEach(function (elem) {            if (elem.classList.contains('slider-visible')){                elem.classList.remove('slider-visible')            }        });         this.image[this.imageID].classList.add('slider-visible');         this.imageID--     }};Slider.prototype.setRightImage = function (){    if (this.imageID === this.image.length-1 ) {        this.image.forEach(function (elem) {            if (elem.classList.contains('slider-visible')) {                elem.classList.remove('slider-visible')            }        });        this.image[this.imageID].classList.add('slider-visible');        this.imageID = 0;        return;    } else if (this.imageID != this.image.length-1 ){        this.image.forEach(function (elem) {            if (elem.classList.contains('slider-visible')){                elem.classList.remove('slider-visible')            }        });        this.image[this.imageID].classList.add('slider-visible');        this.imageID++    }};/** * * @param elem {HTMLImageElement} - иконка загрузки * метод выводит первую картинку слайдера на экран * @param imageID - задает номер выводимого изображения */Slider.prototype.init = function (elem){  this.image[this.imageID].classList.toggle('slider-visible');  this.imageID--;    window.addEventListener('load',function () {        elem.style.display = 'none';    });};/** * * @type {Slider} * @type {HTMLAllCollection} images - с помощью конструктора Slider мы делаем все элементы images объектом класса Slider * * */SliderRome = new Slider(SliderRome, SliderRome.image,SliderRome.divSlider,SliderRome.arrowRight,SliderRome.arrowLeft,SliderRome.loadIcon);imgSlider = new Slider(imgSlider, imgSlider.image,imgSlider.divSlider,imgSlider.arrowRight,imgSlider.arrowLeft,imgSlider.loadIcon);//Images наследует все свойства объекта SLider, прототитоп объекта images стал SliderimgSlider.prototype = Object.create(Slider.prototype);SliderRome.prototype = Object.create(Slider.prototype);//Инициализация слайдеровimgSlider.init(imgSlider.ldIcon);SliderRome.init(SliderRome.ldIcon);//слушатель события на стрелках влево и вправоimgSlider.arrLeft.addEventListener('click',function () {   imgSlider.setLeftImage(imgSlider);});imgSlider.arrRight.addEventListener('click',function () {   imgSlider.setRightImage(imgSlider);});//слушатель события на стрелках влево и вправоSliderRome.arrLeft.addEventListener('click',function () {    SliderRome.setLeftImage(SliderRome);});SliderRome.arrRight.addEventListener('click',function () {    SliderRome.setRightImage(SliderRome);});