import Vue from 'vue'import Vuex from 'vuex'import fbase from './firebase.js'Vue.use(Vuex)export default new Vuex.Store({    state: {        installApp: null,        numbers: null,        qtPage: null,        addNumber:null,        page:null    },    getters: {        statusInstall(state) {            return 'BeforeInstallPromptEvent' in window &&                state.installApp instanceof BeforeInstallPromptEvent        },        numbersFromPage(gapNumbers){        },        gapNumb: state => (page, qtEl) => {            let end = page * (qtEl);            let first = end - qtEl;            let qtPage = state.numbers.length / qtEl            state.qtPage = Math.ceil(qtPage)            state.page = page            let numb = {                arrs: state.numbers.slice(first, end),                firstEl: first,            };            return numb        }    },    mutations: {        setInstall(state, install) {            state.installApp = install            let InstallPromise = state.installApp.userChoice            InstallPromise                .then(                    result => {                        if (result.outcome === 'accepted') {                            state.installApp = null                        }                    },                    err => {                        console.log(err + "ПРОМИС ДИССМИСС")                    }                )        },        async addNumber(state, number) {            await state.numbers.splice(0, 0, number)            state.addNumber = number;            await this.dispatch('updateFireBase', 'Number')        },        setNumber(state,data) {            state.numbers = data        },      async  setUpdate(state,data){            debugger            let i = data[0]+data[1] // получаем фактический индекс в массиве для редактирования            state.numbers.splice(i,1,data[2])          console.log(state.numbers)        },        async delNumber(state, index) {            await state.numbers.splice(index, 1)        },    },    actions: {       async  getDataFireBase(state, path) {           debugger            const number = await fbase.getFbase(path)                .then(res=>{                    this.commit('setNumber', res)                    return res                })        },        async updateFireBase(state,path){           debugger           await fbase.setFbase(path, state.state.numbers)        }    }})